package com.nhsoft.module.report.model;

import com.nhsoft.module.report.util.DateUtil;
import org.apache.commons.lang3.StringUtils;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Transient;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * CardConsume generated by hbm2java
 */
@SuppressWarnings("rawtypes")
@Entity
public class CardConsume implements java.io.Serializable {

	private static final Logger logger = LoggerFactory.getLogger(CardConsume.class);
	private static final long serialVersionUID = 2243541647048389784L;
	@Id
	private String consumeFid;
	private String systemBookCode;
	private Integer branchNum;
	private Integer shiftTableNum;
	private String shiftTableBizday;
	private Integer consumeCustNum;
	private Integer consumeCardType;
	private String consumePrintedNum;
	private Integer consumeCategory;
	private String consumeType;
	private BigDecimal consumeBalance;
	private BigDecimal consumeTotalMoney;
	private BigDecimal consumePoint;
	private String consumePhysicalNum;
	private BigDecimal consumeDiscount;
	private BigDecimal consumeRound;
	private BigDecimal consumeMoney;
	private BigDecimal consumeInvoice;
	private Date consumeDate;
	private String consumeOperator;
	private String consumeBillNum;
	private Integer consumeCount;
	private String consumeMemo;
	private String consumeBranchName;
	private String consumeCustName;
	private Integer consumeBalanceDetailNum;
	private Boolean consumeSettlementFlag;
	private Boolean consumeRevokeFlag;
	private Boolean consumeWinningFlag;
	private String consumeOrderNo;
	@Column(name = "consumeReCardFlag")
	private Boolean consumeRecardFlag;
	private String consumeMachine;
	private Boolean consumeRepealed;
	private Boolean consumeNoticeFlag;
	private String consumeOpenId;
	private String consumeAntiFid;
	private String consumeSeller;
	private Date consumeSynchDate;
	private BigDecimal consumeRepealedMoney;
	
	
	//临时属性
	@Transient
	private BigDecimal consumeWinningMaxMoney;
	@Transient
	private BigDecimal consumeWinningMinMoney;
	@Transient
	private String consumeWinningNums;
	@Transient
	private Date consumeWinningStart;
	@Transient
	private String consumeCrypt;
	@Transient
	private String reSendFid;//重新上传原单据号
	
	public BigDecimal getConsumeRepealedMoney() {
		return consumeRepealedMoney;
	}
	
	public void setConsumeRepealedMoney(BigDecimal consumeRepealedMoney) {
		this.consumeRepealedMoney = consumeRepealedMoney;
	}
	
	public CardConsume() {
		setConsumeSettlementFlag(false);
	}

	public String getReSendFid() {
		return reSendFid;
	}

	public void setReSendFid(String reSendFid) {
		this.reSendFid = reSendFid;
	}

	public Date getConsumeSynchDate() {
		return consumeSynchDate;
	}

	public void setConsumeSynchDate(Date consumeSynchDate) {
		this.consumeSynchDate = consumeSynchDate;
	}

	public Date getConsumeWinningStart() {
		return consumeWinningStart;
	}

	public void setConsumeWinningStart(Date consumeWinningStart) {
		this.consumeWinningStart = consumeWinningStart;
	}

	public String getConsumeWinningNums() {
		return consumeWinningNums;
	}

	public void setConsumeWinningNums(String consumeWinningNums) {
		this.consumeWinningNums = consumeWinningNums;
	}

	public String getConsumeCrypt() {
		return consumeCrypt;
	}

	public void setConsumeCrypt(String consumeCrypt) {
		this.consumeCrypt = consumeCrypt;
	}

	public String getConsumeSeller() {
		return consumeSeller;
	}

	public void setConsumeSeller(String consumeSeller) {
		this.consumeSeller = consumeSeller;
	}

	public String getConsumeAntiFid() {
		return consumeAntiFid;
	}

	public void setConsumeAntiFid(String consumeAntiFid) {
		this.consumeAntiFid = consumeAntiFid;
	}

	public BigDecimal getConsumeWinningMinMoney() {
		return consumeWinningMinMoney;
	}

	public void setConsumeWinningMinMoney(BigDecimal consumeWinningMinMoney) {
		this.consumeWinningMinMoney = consumeWinningMinMoney;
	}

	public BigDecimal getConsumeWinningMaxMoney() {
		return consumeWinningMaxMoney;
	}

	public void setConsumeWinningMaxMoney(BigDecimal consumeWinningMaxMoney) {
		this.consumeWinningMaxMoney = consumeWinningMaxMoney;
	}

	public Boolean getConsumeRepealed() {
		return consumeRepealed;
	}

	public void setConsumeRepealed(Boolean consumeRepealed) {
		this.consumeRepealed = consumeRepealed;
	}

	public String getConsumeFid() {
		return this.consumeFid;
	}

	public void setConsumeFid(String consumeFid) {
		this.consumeFid = consumeFid;
	}

	public String getSystemBookCode() {
		return this.systemBookCode;
	}

	public void setSystemBookCode(String systemBookCode) {
		this.systemBookCode = systemBookCode;
	}

	public Integer getBranchNum() {
		return this.branchNum;
	}

	public void setBranchNum(Integer branchNum) {
		this.branchNum = branchNum;
	}

	public Integer getShiftTableNum() {
		return this.shiftTableNum;
	}

	public void setShiftTableNum(Integer shiftTableNum) {
		this.shiftTableNum = shiftTableNum;
	}

	public String getShiftTableBizday() {
		return this.shiftTableBizday;
	}

	public void setShiftTableBizday(String shiftTableBizday) {
		this.shiftTableBizday = shiftTableBizday;
	}

	public String getConsumeOrderNo() {
		return consumeOrderNo;
	}

	public void setConsumeOrderNo(String consumeOrderNo) {
		this.consumeOrderNo = consumeOrderNo;
	}

	public Integer getConsumeCustNum() {
		return this.consumeCustNum;
	}

	public void setConsumeCustNum(Integer consumeCustNum) {
		this.consumeCustNum = consumeCustNum;
	}

	public Integer getConsumeCardType() {
		return this.consumeCardType;
	}

	public void setConsumeCardType(Integer consumeCardType) {
		this.consumeCardType = consumeCardType;
	}

	public String getConsumePrintedNum() {
		return this.consumePrintedNum;
	}

	public void setConsumePrintedNum(String consumePrintedNum) {
		this.consumePrintedNum = consumePrintedNum;
	}

	public Integer getConsumeCategory() {
		return this.consumeCategory;
	}

	public void setConsumeCategory(Integer consumeCategory) {
		this.consumeCategory = consumeCategory;
	}

	public String getConsumeType() {
		return this.consumeType;
	}

	public void setConsumeType(String consumeType) {
		this.consumeType = consumeType;
	}

	public BigDecimal getConsumeBalance() {
		return this.consumeBalance;
	}

	public void setConsumeBalance(BigDecimal consumeBalance) {
		this.consumeBalance = consumeBalance;
	}

	public BigDecimal getConsumeTotalMoney() {
		return this.consumeTotalMoney;
	}

	public void setConsumeTotalMoney(BigDecimal consumeTotalMoney) {
		this.consumeTotalMoney = consumeTotalMoney;
	}

	public BigDecimal getConsumePoint() {
		return this.consumePoint;
	}

	public void setConsumePoint(BigDecimal consumePoint) {
		this.consumePoint = consumePoint;
	}

	public String getConsumePhysicalNum() {
		return this.consumePhysicalNum;
	}

	public void setConsumePhysicalNum(String consumePhysicalNum) {
		this.consumePhysicalNum = consumePhysicalNum;
	}

	public BigDecimal getConsumeDiscount() {
		return this.consumeDiscount;
	}

	public void setConsumeDiscount(BigDecimal consumeDiscount) {
		this.consumeDiscount = consumeDiscount;
	}

	public BigDecimal getConsumeRound() {
		return this.consumeRound;
	}

	public void setConsumeRound(BigDecimal consumeRound) {
		this.consumeRound = consumeRound;
	}

	public BigDecimal getConsumeMoney() {
		return this.consumeMoney;
	}

	public void setConsumeMoney(BigDecimal consumeMoney) {
		this.consumeMoney = consumeMoney;
	}

	public BigDecimal getConsumeInvoice() {
		return this.consumeInvoice;
	}

	public void setConsumeInvoice(BigDecimal consumeInvoice) {
		this.consumeInvoice = consumeInvoice;
	}

	public Date getConsumeDate() {
		return this.consumeDate;
	}

	public void setConsumeDate(Date consumeDate) {
		this.consumeDate = consumeDate;
	}

	public String getConsumeOperator() {
		return this.consumeOperator;
	}

	public void setConsumeOperator(String consumeOperator) {
		this.consumeOperator = consumeOperator;
	}

	public String getConsumeBillNum() {
		return this.consumeBillNum;
	}

	public void setConsumeBillNum(String consumeBillNum) {
		this.consumeBillNum = consumeBillNum;
	}

	public Integer getConsumeCount() {
		return this.consumeCount;
	}

	public void setConsumeCount(Integer consumeCount) {
		this.consumeCount = consumeCount;
	}

	public String getConsumeMemo() {
		return this.consumeMemo;
	}

	public void setConsumeMemo(String consumeMemo) {
		this.consumeMemo = consumeMemo;
	}

	public String getConsumeBranchName() {
		return this.consumeBranchName;
	}

	public void setConsumeBranchName(String consumeBranchName) {
		this.consumeBranchName = consumeBranchName;
	}

	public String getConsumeCustName() {
		return this.consumeCustName;
	}

	public void setConsumeCustName(String consumeCustName) {
		this.consumeCustName = consumeCustName;
	}

	public Integer getConsumeBalanceDetailNum() {
		return this.consumeBalanceDetailNum;
	}

	public void setConsumeBalanceDetailNum(Integer consumeBalanceDetailNum) {
		this.consumeBalanceDetailNum = consumeBalanceDetailNum;
	}

	public Boolean getConsumeSettlementFlag() {
		return this.consumeSettlementFlag;
	}

	public void setConsumeSettlementFlag(Boolean consumeSettlementFlag) {
		this.consumeSettlementFlag = consumeSettlementFlag;
	}

	public Boolean getConsumeRevokeFlag() {
		return this.consumeRevokeFlag;
	}

	public void setConsumeRevokeFlag(Boolean consumeRevokeFlag) {
		this.consumeRevokeFlag = consumeRevokeFlag;
	}

	public Boolean getConsumeWinningFlag() {
		return consumeWinningFlag;
	}

	public void setConsumeWinningFlag(Boolean consumeWinningFlag) {
		this.consumeWinningFlag = consumeWinningFlag;
	}

	public Boolean getConsumeRecardFlag() {
		return consumeRecardFlag;
	}

	public void setConsumeRecardFlag(Boolean consumeRecardFlag) {
		this.consumeRecardFlag = consumeRecardFlag;
	}

	public String getConsumeMachine() {
		return consumeMachine;
	}

	public void setConsumeMachine(String consumeMachine) {
		this.consumeMachine = consumeMachine;
	}

	public Boolean getConsumeNoticeFlag() {
		return consumeNoticeFlag;
	}

	public void setConsumeNoticeFlag(Boolean consumeNoticeFlag) {
		this.consumeNoticeFlag = consumeNoticeFlag;
	}

	public String getConsumeOpenId() {
		return consumeOpenId;
	}

	public void setConsumeOpenId(String consumeOpenId) {
		this.consumeOpenId = consumeOpenId;
	}

	public void toXml(Element cardConsumeElement) {
        Element child;
        if (consumeFid != null) {
            child = cardConsumeElement.addElement("consume_fid");
            child.setText(consumeFid.toString());
        }
        if (systemBookCode != null) {
            child = cardConsumeElement.addElement("system_book_code");
            child.setText(systemBookCode.toString());
        }
        if (branchNum != null) {
            child = cardConsumeElement.addElement("branch_num");
            child.setText(branchNum.toString());
        }
        if (shiftTableNum != null) {
            child = cardConsumeElement.addElement("shift_table_num");
            child.setText(shiftTableNum.toString());
        }
        if (shiftTableBizday != null) {
            child = cardConsumeElement.addElement("shift_table_bizday");
            child.setText(shiftTableBizday.toString());
        }
        if (consumeCustNum != null) {
            child = cardConsumeElement.addElement("consume_cust_num");
            child.setText(consumeCustNum.toString());
        }
        if (consumeCardType != null) {
            child = cardConsumeElement.addElement("consume_card_type");
            child.setText(consumeCardType.toString());
        }
        if (consumePrintedNum != null) {
            child = cardConsumeElement.addElement("consume_printed_num");
            child.setText(consumePrintedNum.toString());
        }
        if (consumeCategory != null) {
            child = cardConsumeElement.addElement("consume_category");
            child.setText(consumeCategory.toString());
        }
        if (consumeType != null) {
            child = cardConsumeElement.addElement("consume_type");
            child.setText(consumeType.toString());
        }
        if (consumeBalance != null) {
            child = cardConsumeElement.addElement("consume_balance");
            child.setText(consumeBalance.toString());
        }
        if (consumeTotalMoney != null) {
            child = cardConsumeElement.addElement("consume_total_money");
            child.setText(consumeTotalMoney.toString());
        }
        if (consumePoint != null) {
            child = cardConsumeElement.addElement("consume_point");
            child.setText(consumePoint.toString());
        }
        if (consumePhysicalNum != null) {
            child = cardConsumeElement.addElement("consume_physical_num");
            child.setText(consumePhysicalNum.toString());
        }
        if (consumeDiscount != null) {
            child = cardConsumeElement.addElement("consume_discount");
            child.setText(consumeDiscount.toString());
        }
        if (consumeRound != null) {
            child = cardConsumeElement.addElement("consume_round");
            child.setText(consumeRound.toString());
        }
        if (consumeMoney != null) {
            child = cardConsumeElement.addElement("consume_money");
            child.setText(consumeMoney.toString());
        }
        if (consumeInvoice != null) {
            child = cardConsumeElement.addElement("consume_invoice");
            child.setText(consumeInvoice.toString());
        }
        if (consumeDate != null) {
            child = cardConsumeElement.addElement("consume_date");
            child.setText(DateUtil.getXmlTString(consumeDate));
        }
        if (consumeOperator != null) {
            child = cardConsumeElement.addElement("consume_operator");
            child.setText(consumeOperator.toString());
        }
        if (consumeBillNum != null) {
            child = cardConsumeElement.addElement("consume_bill_num");
            child.setText(consumeBillNum.toString());
        }
        if (consumeCount != null) {
            child = cardConsumeElement.addElement("consume_count");
            child.setText(consumeCount.toString());
        }
        if (consumeMemo != null) {
            child = cardConsumeElement.addElement("consume_memo");
            child.setText(consumeMemo.toString());
        }
        if (consumeBranchName != null) {
            child = cardConsumeElement.addElement("consume_branch_name");
            child.setText(consumeBranchName.toString());
        }
        if (consumeCustName != null) {
            child = cardConsumeElement.addElement("consume_cust_name");
            child.setText(consumeCustName.toString());
        }
        if (consumeBalanceDetailNum != null) {
            child = cardConsumeElement.addElement("consume_balance_detail_num");
            child.setText(consumeBalanceDetailNum.toString());
        }
        if (consumeSettlementFlag != null) {
            child = cardConsumeElement.addElement("CONSUME_SETTLEMENT_FLAG");
            child.setText(consumeSettlementFlag.toString());
        }
        if (consumeRevokeFlag != null) {
            child = cardConsumeElement.addElement("CONSUME_REVOKE_FLAG");
            child.setText(consumeRevokeFlag.toString());
        }
        if (consumeWinningFlag != null) {
            child = cardConsumeElement.addElement("CONSUME_WINNING_FLAG");
            child.setText(consumeWinningFlag.toString());
        }
        if (consumeOrderNo != null) {
            child = cardConsumeElement.addElement("CONSUME_ORDER_NO");
            child.setText(consumeOrderNo.toString());
        }
        if (consumeRecardFlag != null) {
            child = cardConsumeElement.addElement("CONSUME_RE_CARD_FLAG");
            child.setText(consumeRecardFlag.toString());
        }
        if (consumeMachine != null) {
            child = cardConsumeElement.addElement("CONSUME_MACHINE");
            child.setText(consumeMachine.toString());
        }
    }

    public static CardConsume fromXml(Element cardConsumeElement) throws Exception {
        Element child;
        CardConsume cardConsume = new CardConsume();
        child = (Element) cardConsumeElement.selectSingleNode("consume_fid");
        if (child != null) {
            cardConsume.setConsumeFid(child.getText());
        }
        child = (Element) cardConsumeElement.selectSingleNode("system_book_code");
        if (child != null) {
            cardConsume.setSystemBookCode(child.getText());
        }
        child = (Element) cardConsumeElement.selectSingleNode("branch_num");
        if (child != null) {
            cardConsume.setBranchNum(new Integer(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("shift_table_num");
        if (child != null) {
            cardConsume.setShiftTableNum(new Integer(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("shift_table_bizday");
        if (child != null) {
            cardConsume.setShiftTableBizday(child.getText());
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_cust_num");
        if (child != null) {
            cardConsume.setConsumeCustNum(new Integer(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_card_type");
        if (child != null) {
            cardConsume.setConsumeCardType(new Integer(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_printed_num");
        if (child != null) {
            cardConsume.setConsumePrintedNum(child.getText());
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_category");
        if (child != null) {
            cardConsume.setConsumeCategory(new Integer(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_type");
        if (child != null) {
            cardConsume.setConsumeType(child.getText());
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_balance");
        if (child != null) {
            cardConsume.setConsumeBalance(new BigDecimal(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_total_money");
        if (child != null) {
            cardConsume.setConsumeTotalMoney(new BigDecimal(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_point");
        if (child != null) {
            cardConsume.setConsumePoint(new BigDecimal(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_physical_num");
        if (child != null) {
            cardConsume.setConsumePhysicalNum(child.getText());
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_discount");
        if (child != null) {
            cardConsume.setConsumeDiscount(new BigDecimal(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_round");
        if (child != null) {
            cardConsume.setConsumeRound(new BigDecimal(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_money");
        if (child != null) {
            cardConsume.setConsumeMoney(new BigDecimal(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_invoice");
        if (child != null) {
            cardConsume.setConsumeInvoice(new BigDecimal(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_date");
        if (child != null) {
            cardConsume.setConsumeDate(DateUtil.getXmlTDate(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_operator");
        if (child != null) {
            cardConsume.setConsumeOperator(child.getText());
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_bill_num");
        if (child != null) {
            cardConsume.setConsumeBillNum(child.getText());
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_count");
        if (child != null) {
            cardConsume.setConsumeCount(new Integer(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_memo");
        if (child != null) {
            cardConsume.setConsumeMemo(child.getText());
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_branch_name");
        if (child != null) {
            cardConsume.setConsumeBranchName(child.getText());
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_cust_name");
        if (child != null) {
            cardConsume.setConsumeCustName(child.getText());
        }
        child = (Element) cardConsumeElement.selectSingleNode("consume_balance_detail_num");
        if (child != null) {
            cardConsume.setConsumeBalanceDetailNum(new Integer(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("CONSUME_SETTLEMENT_FLAG");
        if (child != null) {
            cardConsume.setConsumeSettlementFlag(new Boolean(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("CONSUME_REVOKE_FLAG");
        if (child != null) {
            cardConsume.setConsumeRevokeFlag(new Boolean(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("CONSUME_WINNING_FLAG");
        if (child != null) {
            cardConsume.setConsumeWinningFlag(new Boolean(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("CONSUME_ORDER_NO");
        if (child != null) {
            cardConsume.setConsumeOrderNo(child.getText());
        }
        child = (Element) cardConsumeElement.selectSingleNode("CONSUME_RE_CARD_FLAG");
        if (child != null) {
            cardConsume.setConsumeRecardFlag(new Boolean(child.getText()));
        }
        child = (Element) cardConsumeElement.selectSingleNode("CONSUME_MACHINE");
        if (child != null) {
            cardConsume.setConsumeMachine(child.getText());
        }
        return cardConsume;
    }

    public static String toXml(List<CardConsume> cardConsumeList) {
        Document document = DocumentHelper.createDocument();
        document.setXMLEncoding("GBK");
        Element root = document.addElement("CARD_CONSUME_LIST");
        for (int i = 0; i < cardConsumeList.size(); i++) {
            CardConsume cardConsume = (CardConsume) cardConsumeList.get(i);
            Element cardConsumeElement = root.addElement("card_consume");
            cardConsume.toXml(cardConsumeElement);
        }
        return document.asXML();
    }

    public static List<CardConsume> fromXml(String xmlStream) throws Exception {
        List<CardConsume> cardConsumeList = new ArrayList<CardConsume>();
        Document document = DocumentHelper.parseText(xmlStream);
 
		List elementList = document.selectNodes("//card_consume");
        for (int i = 0; i < elementList.size(); i++) {
            Element cardConsumeElement = (Element) elementList.get(i);
            CardConsume cardConsume = fromXml(cardConsumeElement);
            cardConsumeList.add(cardConsume);
        }
        return cardConsumeList;
    }

    public static CardConsume objectFromXml(String xmlStream) {
    	if(StringUtils.isEmpty(xmlStream)){
    		return null;
    	}
    	try {
    		 return fromXml(xmlStream).get(0);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return null;
       
    }

    public String objectToXml(CardConsume cardConsume) {
        List<CardConsume> cardConsumeList = new ArrayList<CardConsume>();
        cardConsumeList.add(cardConsume);
        return toXml(cardConsumeList);
    }
	
}
