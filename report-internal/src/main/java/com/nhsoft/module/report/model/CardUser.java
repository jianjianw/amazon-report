package com.nhsoft.module.report.model;



import com.nhsoft.module.report.query.State;
import com.nhsoft.module.report.util.DateUtil;
import org.apache.commons.lang3.StringUtils;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

/**
 * CardUser generated by hbm2java
 */
public class CardUser implements java.io.Serializable {

	private static final Logger logger = LoggerFactory.getLogger(CardUser.class);
	private static final long serialVersionUID = 6142204157193150794L;
	private Integer cardUserNum;
	private String systemBookCode;
	private String cardUserCustName;
	private Date cardUserBirth;
	private String cardUserCustSex;
	private String cardUserIdCardType;
	private String cardUserIdCardNum;
	private String cardUserPhone;
	private String cardUserAddress;
	private String cardUserEmail;
	private Date cardUserDate;
	private Date cardUserDeadline;
	private String cardUserPassword;
	private Integer cardUserCardType;
	private String cardUserStorage;
	private String cardUserMemo;
	private String cardUserTips;
	private String cardUserFirm;
	private String cardUserPhysicalNum;
	private String cardUserPrintedNum;
	private State state;
	private Integer cardUserEnrollShop;
	private Date cardUserInitTime;
	private Integer cardUserDepositCount;
	private Integer cardUserConsumeCount;
	private Integer cardUserInvoiceCount;
	private Integer cardUserBalanceCount;
	private BigDecimal cardUserTotalCash;
	private BigDecimal cardUserTotalInvoice;
	private String cardUserRefNum;
	private String cardUserRefType;
	private Boolean cardUserLocked;
	private String cardUserOperator;
	private Boolean cardUserFlag;
	private Date cardUserLastEditTime;
	private String cardUserUuid;
	private String cardUserRevoker;
	private Date cardUserRevokeTime;
	private Integer cardUserRevokeShop;
	private CardBalance cardBalance;
	private Boolean cardUserExceptionFlag;
	private String cardUserExceptionMemo;
	private String cardUserOpenId;
	private Boolean cardUserChangeEnabled;
	private Boolean cardUserBindWeixin;
	private BigDecimal cardUserPoint;
	private Boolean cardUserUpload;
	private String cardUserAlipayNo;


	// 临时属性
	private String cardUserEnrollShopName;
	private BigDecimal cardUserPointBalance;
	private BigDecimal cardUserTempPoint;
	private OriCardUser oriCardUser;
	private String revokeShiftBizday;
	private Integer revokeShiftNum;
	private boolean fromApi = false;
	private BigDecimal revokeBalance;
	private BigDecimal pointBalance;
	private String memberCode;
	private String memberId;
	private Boolean onlineCard = false;//是否在线发卡
	private List<String> logs = new ArrayList<String>();
	
	public CardUser() {
	}
	
	public String getCardUserAlipayNo() {
		return cardUserAlipayNo;
	}
	
	public void setCardUserAlipayNo(String cardUserAlipayNo) {
		this.cardUserAlipayNo = cardUserAlipayNo;
	}
	
	public Boolean getOnlineCard() {
		return onlineCard;
	}


	public void setOnlineCard(Boolean onlineCard) {
		this.onlineCard = onlineCard;
	}


	public Boolean getCardUserUpload() {
		return cardUserUpload;
	}


	public void setCardUserUpload(Boolean cardUserUpload) {
		this.cardUserUpload = cardUserUpload;
	}


	public BigDecimal getCardUserPoint() {
		return cardUserPoint;
	}


	public void setCardUserPoint(BigDecimal cardUserPoint) {
		this.cardUserPoint = cardUserPoint;
	}


	public String getMemberCode() {
		return memberCode;
	}

	public Boolean getCardUserBindWeixin() {
		return cardUserBindWeixin;
	}


	public void setCardUserBindWeixin(Boolean cardUserBindWeixin) {
		this.cardUserBindWeixin = cardUserBindWeixin;
	}


	public void setMemberCode(String memberCode) {
		this.memberCode = memberCode;
	}


	public String getMemberId() {
		return memberId;
	}


	public void setMemberId(String memberId) {
		this.memberId = memberId;
	}


	public BigDecimal getPointBalance() {
		return pointBalance;
	}


	public void setPointBalance(BigDecimal pointBalance) {
		this.pointBalance = pointBalance;
	}


	public BigDecimal getRevokeBalance() {
		return revokeBalance;
	}


	public void setRevokeBalance(BigDecimal revokeBalance) {
		this.revokeBalance = revokeBalance;
	}


	public String getRevokeShiftBizday() {
		return revokeShiftBizday;
	}

	public void setRevokeShiftBizday(String revokeShiftBizday) {
		this.revokeShiftBizday = revokeShiftBizday;
	}

	public Integer getRevokeShiftNum() {
		return revokeShiftNum;
	}

	public void setRevokeShiftNum(Integer revokeShiftNum) {
		this.revokeShiftNum = revokeShiftNum;
	}

	public boolean isFromApi() {
		return fromApi;
	}

	public void setFromApi(boolean fromApi) {
		this.fromApi = fromApi;
	}

	public Integer getCardUserNum() {
		return this.cardUserNum;
	}

	public void setCardUserNum(Integer cardUserNum) {
		this.cardUserNum = cardUserNum;
	}

	public String getSystemBookCode() {
		return this.systemBookCode;
	}

	public void setSystemBookCode(String systemBookCode) {
		this.systemBookCode = systemBookCode;
	}

	public String getCardUserCustName() {
		return this.cardUserCustName;
	}

	public void setCardUserCustName(String cardUserCustName) {
		this.cardUserCustName = cardUserCustName;
	}

	public Date getCardUserBirth() {
		return this.cardUserBirth;
	}

	public void setCardUserBirth(Date cardUserBirth) {
		this.cardUserBirth = cardUserBirth;
	}

	public String getCardUserCustSex() {
		return this.cardUserCustSex;
	}

	public void setCardUserCustSex(String cardUserCustSex) {
		this.cardUserCustSex = cardUserCustSex;
	}

	public String getCardUserIdCardType() {
		return this.cardUserIdCardType;
	}

	public void setCardUserIdCardType(String cardUserIdCardType) {
		this.cardUserIdCardType = cardUserIdCardType;
	}

	public String getCardUserIdCardNum() {
		return this.cardUserIdCardNum;
	}

	public void setCardUserIdCardNum(String cardUserIdCardNum) {
		this.cardUserIdCardNum = cardUserIdCardNum;
	}

	public String getCardUserPhone() {
		return this.cardUserPhone;
	}

	public void setCardUserPhone(String cardUserPhone) {
		this.cardUserPhone = cardUserPhone;
	}

	public String getCardUserAddress() {
		return this.cardUserAddress;
	}

	public void setCardUserAddress(String cardUserAddress) {
		this.cardUserAddress = cardUserAddress;
	}

	public String getCardUserEmail() {
		return this.cardUserEmail;
	}

	public void setCardUserEmail(String cardUserEmail) {
		this.cardUserEmail = cardUserEmail;
	}

	public Date getCardUserDate() {
		return this.cardUserDate;
	}

	public void setCardUserDate(Date cardUserDate) {
		this.cardUserDate = cardUserDate;
	}

	public Date getCardUserDeadline() {
		return this.cardUserDeadline;
	}

	public void setCardUserDeadline(Date cardUserDeadline) {
		this.cardUserDeadline = cardUserDeadline;
	}

	public String getCardUserPassword() {
		return this.cardUserPassword;
	}

	public void setCardUserPassword(String cardUserPassword) {
		this.cardUserPassword = cardUserPassword;
	}

	public Integer getCardUserCardType() {
		return this.cardUserCardType;
	}

	public void setCardUserCardType(Integer cardUserCardType) {
		this.cardUserCardType = cardUserCardType;
	}

	public String getCardUserStorage() {
		return this.cardUserStorage;
	}

	public void setCardUserStorage(String cardUserStorage) {
		this.cardUserStorage = cardUserStorage;
	}

	public String getCardUserMemo() {
		return this.cardUserMemo;
	}

	public void setCardUserMemo(String cardUserMemo) {
		this.cardUserMemo = cardUserMemo;
	}

	public String getCardUserTips() {
		return this.cardUserTips;
	}

	public void setCardUserTips(String cardUserTips) {
		this.cardUserTips = cardUserTips;
	}

	public String getCardUserFirm() {
		return this.cardUserFirm;
	}

	public void setCardUserFirm(String cardUserFirm) {
		this.cardUserFirm = cardUserFirm;
	}

	public String getCardUserPhysicalNum() {
		return this.cardUserPhysicalNum;
	}

	public void setCardUserPhysicalNum(String cardUserPhysicalNum) {
		this.cardUserPhysicalNum = cardUserPhysicalNum;
	}

	public String getCardUserPrintedNum() {
		return this.cardUserPrintedNum;
	}

	public void setCardUserPrintedNum(String cardUserPrintedNum) {
		this.cardUserPrintedNum = cardUserPrintedNum;
	}

	public State getState() {
		return state;
	}

	public void setState(State state) {
		this.state = state;
	}

	public Integer getCardUserEnrollShop() {
		return this.cardUserEnrollShop;
	}

	public void setCardUserEnrollShop(Integer cardUserEnrollShop) {
		if(cardUserEnrollShop == null){
			cardUserEnrollShop = 0;
		}
		this.cardUserEnrollShop = cardUserEnrollShop;
	}

	public Date getCardUserInitTime() {
		return this.cardUserInitTime;
	}

	public void setCardUserInitTime(Date cardUserInitTime) {
		this.cardUserInitTime = cardUserInitTime;
	}

	public Integer getCardUserDepositCount() {
		return this.cardUserDepositCount;
	}

	public void setCardUserDepositCount(Integer cardUserDepositCount) {
		this.cardUserDepositCount = cardUserDepositCount;
	}

	public Integer getCardUserConsumeCount() {
		return this.cardUserConsumeCount;
	}

	public void setCardUserConsumeCount(Integer cardUserConsumeCount) {
		this.cardUserConsumeCount = cardUserConsumeCount;
	}

	public Integer getCardUserInvoiceCount() {
		return this.cardUserInvoiceCount;
	}

	public void setCardUserInvoiceCount(Integer cardUserInvoiceCount) {
		this.cardUserInvoiceCount = cardUserInvoiceCount;
	}

	public Integer getCardUserBalanceCount() {
		return this.cardUserBalanceCount;
	}

	public void setCardUserBalanceCount(Integer cardUserBalanceCount) {
		this.cardUserBalanceCount = cardUserBalanceCount;
	}

	public BigDecimal getCardUserTotalCash() {
		return this.cardUserTotalCash;
	}

	public void setCardUserTotalCash(BigDecimal cardUserTotalCash) {
		this.cardUserTotalCash = cardUserTotalCash;
	}

	public BigDecimal getCardUserTotalInvoice() {
		return this.cardUserTotalInvoice;
	}

	public void setCardUserTotalInvoice(BigDecimal cardUserTotalInvoice) {
		this.cardUserTotalInvoice = cardUserTotalInvoice;
	}

	public String getCardUserRefNum() {
		return this.cardUserRefNum;
	}

	public void setCardUserRefNum(String cardUserRefNum) {
		this.cardUserRefNum = cardUserRefNum;
	}

	public String getCardUserRefType() {
		return this.cardUserRefType;
	}

	public void setCardUserRefType(String cardUserRefType) {
		this.cardUserRefType = cardUserRefType;
	}

	public Boolean getCardUserLocked() {
		return this.cardUserLocked;
	}

	public void setCardUserLocked(Boolean cardUserLocked) {
		this.cardUserLocked = cardUserLocked;
	}

	public String getCardUserOperator() {
		return this.cardUserOperator;
	}

	public void setCardUserOperator(String cardUserOperator) {
		this.cardUserOperator = cardUserOperator;
	}

	public Boolean getCardUserFlag() {
		return this.cardUserFlag;
	}

	public void setCardUserFlag(Boolean cardUserFlag) {
		this.cardUserFlag = cardUserFlag;
	}

	public Date getCardUserLastEditTime() {
		return this.cardUserLastEditTime;
	}

	public void setCardUserLastEditTime(Date cardUserLastEditTime) {
		this.cardUserLastEditTime = cardUserLastEditTime;
	}

	public String getCardUserUuid() {
		return this.cardUserUuid;
	}

	public void setCardUserUuid(String cardUserUuid) {
		this.cardUserUuid = cardUserUuid;
	}

	public String getCardUserRevoker() {
		return this.cardUserRevoker;
	}

	public void setCardUserRevoker(String cardUserRevoker) {
		this.cardUserRevoker = cardUserRevoker;
	}

	public Date getCardUserRevokeTime() {
		return this.cardUserRevokeTime;
	}

	public void setCardUserRevokeTime(Date cardUserRevokeTime) {
		this.cardUserRevokeTime = cardUserRevokeTime;
	}

	public Integer getCardUserRevokeShop() {
		return this.cardUserRevokeShop;
	}

	public void setCardUserRevokeShop(Integer cardUserRevokeShop) {
		this.cardUserRevokeShop = cardUserRevokeShop;
	}

	public CardBalance getCardBalance() {
		return cardBalance;
	}

	public void setCardBalance(CardBalance cardBalance) {
		this.cardBalance = cardBalance;
	}

	public Boolean getCardUserExceptionFlag() {
		return cardUserExceptionFlag;
	}

	public void setCardUserExceptionFlag(Boolean cardUserExceptionFlag) {
		this.cardUserExceptionFlag = cardUserExceptionFlag;
	}

	public String getCardUserExceptionMemo() {
		return cardUserExceptionMemo;
	}

	public void setCardUserExceptionMemo(String cardUserExceptionMemo) {
		this.cardUserExceptionMemo = cardUserExceptionMemo;
	}

	public String getCardUserEnrollShopName() {
		return cardUserEnrollShopName;
	}

	public void setCardUserEnrollShopName(String cardUserEnrollShopName) {
		this.cardUserEnrollShopName = cardUserEnrollShopName;
	}

	public BigDecimal getCardUserPointBalance() {
		return cardUserPointBalance;
	}

	public void setCardUserPointBalance(BigDecimal cardUserPointBalance) {
		this.cardUserPointBalance = cardUserPointBalance;
	}

	public String getCardUserOpenId() {
		return cardUserOpenId;
	}

	public void setCardUserOpenId(String cardUserOpenId) {
		this.cardUserOpenId = cardUserOpenId;
	}

	public BigDecimal getCardUserTempPoint() {
		return cardUserTempPoint;
	}

	public void setCardUserTempPoint(BigDecimal cardUserTempPoint) {
		this.cardUserTempPoint = cardUserTempPoint;
	}

	public OriCardUser getOriCardUser() {
		return oriCardUser;
	}

	public void setOriCardUser(OriCardUser oriCardUser) {
		this.oriCardUser = oriCardUser;
	}

	public Boolean getCardUserChangeEnabled() {
		return cardUserChangeEnabled;
	}


	public void setCardUserChangeEnabled(Boolean cardUserChangeEnabled) {
		this.cardUserChangeEnabled = cardUserChangeEnabled;
	}


	public void toXml(Element cardUserElement) {
		Element child;
		if (cardUserNum != null) {
			child = cardUserElement.addElement("card_user_num".toUpperCase());
			child.setText(cardUserNum.toString());
		}
		if (systemBookCode != null) {
			child = cardUserElement.addElement("system_book_code".toUpperCase());
			child.setText(systemBookCode.toString());
		}
		if (cardUserCustName != null) {
			child = cardUserElement.addElement("card_user_cust_name".toUpperCase());
			child.setText(cardUserCustName.toString());
		}
		if (cardUserBirth != null) {
			child = cardUserElement.addElement("card_user_birth".toUpperCase());
			child.setText(DateUtil.getXmlTString(cardUserBirth));
		}
		if (cardUserCustSex != null) {
			child = cardUserElement.addElement("card_user_cust_sex".toUpperCase());
			child.setText(cardUserCustSex.toString());
		}
		if (cardUserIdCardType != null) {
			child = cardUserElement.addElement("card_user_id_card_type".toUpperCase());
			child.setText(cardUserIdCardType.toString());
		}
		if (cardUserIdCardNum != null) {
			child = cardUserElement.addElement("card_user_id_card_num".toUpperCase());
			child.setText(cardUserIdCardNum.toString());
		}
		if (cardUserPhone != null) {
			child = cardUserElement.addElement("card_user_phone".toUpperCase());
			child.setText(cardUserPhone.toString());
		}
		if (cardUserAddress != null) {
			child = cardUserElement.addElement("card_user_address".toUpperCase());
			child.setText(cardUserAddress.toString());
		}
		if (cardUserEmail != null) {
			child = cardUserElement.addElement("card_user_email".toUpperCase());
			child.setText(cardUserEmail.toString());
		}
		if (cardUserDate != null) {
			child = cardUserElement.addElement("card_user_date".toUpperCase());
			child.setText(DateUtil.getXmlTString(cardUserDate));
		}
		if (cardUserDeadline != null) {
			child = cardUserElement.addElement("card_user_deadline".toUpperCase());
			child.setText(DateUtil.getXmlTString(cardUserDeadline));
		}
		if (cardUserPassword != null) {
			child = cardUserElement.addElement("card_user_password".toUpperCase());
			child.setText(cardUserPassword.toString());
		}
		if (cardUserCardType != null) {
			child = cardUserElement.addElement("card_user_card_type".toUpperCase());
			child.setText(cardUserCardType.toString());
		}
		if (cardUserStorage != null) {
			child = cardUserElement.addElement("card_user_storage".toUpperCase());
			child.setText(cardUserStorage.toString());
		}
		if (cardUserMemo != null) {
			child = cardUserElement.addElement("card_user_memo".toUpperCase());
			child.setText(cardUserMemo.toString());
		}
		if (cardUserTips != null) {
			child = cardUserElement.addElement("card_user_tips".toUpperCase());
			child.setText(cardUserTips.toString());
		}
		if (cardUserFirm != null) {
			child = cardUserElement.addElement("card_user_firm".toUpperCase());
			child.setText(cardUserFirm.toString());
		}
		if (cardUserPhysicalNum != null) {
			child = cardUserElement.addElement("card_user_physical_num".toUpperCase());
			child.setText(cardUserPhysicalNum.toString());
		}
		if (cardUserPrintedNum != null) {
			child = cardUserElement.addElement("card_user_printed_num".toUpperCase());
			child.setText(cardUserPrintedNum.toString());
		}
		if (state != null) {
			child = cardUserElement.addElement("card_user_state_code".toUpperCase());
			child.setText(state.getStateCode().toString());

			child = cardUserElement.addElement("card_user_state_name".toUpperCase());
			child.setText(state.getStateName().toString());
		}
		if (cardUserEnrollShop != null) {
			child = cardUserElement.addElement("card_user_enroll_shop".toUpperCase());
			child.setText(cardUserEnrollShop.toString());
		}
		if (cardUserInitTime != null) {
			child = cardUserElement.addElement("card_user_init_time".toUpperCase());
			child.setText(DateUtil.getXmlTString(cardUserInitTime));
		}
		if (cardUserDepositCount != null) {
			child = cardUserElement.addElement("card_user_deposit_count".toUpperCase());
			child.setText(cardUserDepositCount.toString());
		}
		if (cardUserConsumeCount != null) {
			child = cardUserElement.addElement("card_user_consume_count".toUpperCase());
			child.setText(cardUserConsumeCount.toString());
		}
		if (cardUserInvoiceCount != null) {
			child = cardUserElement.addElement("card_user_invoice_count".toUpperCase());
			child.setText(cardUserInvoiceCount.toString());
		}
		if (cardUserBalanceCount != null) {
			child = cardUserElement.addElement("card_user_balance_count".toUpperCase());
			child.setText(cardUserBalanceCount.toString());
		}
		if (cardUserTotalCash != null) {
			child = cardUserElement.addElement("card_user_total_cash".toUpperCase());
			child.setText(cardUserTotalCash.toString());
		}
		if (cardUserTotalInvoice != null) {
			child = cardUserElement.addElement("card_user_total_invoice".toUpperCase());
			child.setText(cardUserTotalInvoice.toString());
		}
		if (cardUserRefNum != null) {
			child = cardUserElement.addElement("card_user_ref_num".toUpperCase());
			child.setText(cardUserRefNum.toString());
		}
		if (cardUserRefType != null) {
			child = cardUserElement.addElement("card_user_ref_type".toUpperCase());
			child.setText(cardUserRefType.toString());
		}
		if (cardUserLocked != null) {
			child = cardUserElement.addElement("card_user_locked".toUpperCase());
			child.setText(cardUserLocked.toString());
		}
		if (cardUserOperator != null) {
			child = cardUserElement.addElement("card_user_operator".toUpperCase());
			child.setText(cardUserOperator.toString());
		}
		if (cardUserFlag != null) {
			child = cardUserElement.addElement("card_user_flag".toUpperCase());
			child.setText(cardUserFlag.toString());
		}
		if (cardUserLastEditTime != null) {
			child = cardUserElement.addElement("card_user_last_edit_time".toUpperCase());
			child.setText(DateUtil.getXmlTString(cardUserLastEditTime));
		}
		if (cardUserUuid != null) {
			child = cardUserElement.addElement("card_user_uuid".toUpperCase());
			child.setText(cardUserUuid.toString());
		}
		if (cardUserRevoker != null) {
			child = cardUserElement.addElement("card_user_revoker".toUpperCase());
			child.setText(cardUserRevoker.toString());
		}
		if (cardUserRevokeTime != null) {
			child = cardUserElement.addElement("card_user_revoke_time".toUpperCase());
			child.setText(DateUtil.getXmlTString(cardUserRevokeTime));
		}
		if (cardUserRevokeShop != null) {
			child = cardUserElement.addElement("card_user_revoke_shop".toUpperCase());
			child.setText(cardUserRevokeShop.toString());
		}
		if (cardUserExceptionFlag != null) {
			child = cardUserElement.addElement("card_user_exception_flag".toUpperCase());
			child.setText(cardUserExceptionFlag.toString());
		}
		if (cardUserExceptionMemo != null) {
			child = cardUserElement.addElement("card_user_exception_memo".toUpperCase());
			child.setText(cardUserExceptionMemo.toString());
		}
		if (cardUserOpenId != null) {
			cardUserElement.addElement("card_user_open_id".toUpperCase()).setText(cardUserOpenId);
		}
	}

	@SuppressWarnings("unchecked")
	public static CardUser fromXml(Element cardUserElement) {
		Element child;
		CardUser cardUser = new CardUser();
		Iterator<Element> iterator = cardUserElement.elementIterator();
		while (iterator.hasNext()) {
			child = iterator.next();
			if (child.getName().equalsIgnoreCase("card_user_num")) {
				cardUser.setCardUserNum(new Integer(child.getText()));
			} else if (child.getName().equalsIgnoreCase("system_book_code")) {
				cardUser.setSystemBookCode(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_cust_name")) {
				cardUser.setCardUserCustName(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_birth")) {
				cardUser.setCardUserBirth(DateUtil.getXmlTDate(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_cust_sex")) {
				cardUser.setCardUserCustSex(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_id_card_type")) {
				cardUser.setCardUserIdCardType(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_id_card_num")) {
				cardUser.setCardUserIdCardNum(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_phone")) {
				cardUser.setCardUserPhone(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_address")) {
				cardUser.setCardUserAddress(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_email")) {
				cardUser.setCardUserEmail(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_date")) {
				cardUser.setCardUserDate(DateUtil.getXmlTDate(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_deadline")) {
				cardUser.setCardUserDeadline(DateUtil.getXmlTDate(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_password")) {
				cardUser.setCardUserPassword(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_card_type")) {
				cardUser.setCardUserCardType(new Integer(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_storage")) {
				cardUser.setCardUserStorage(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_memo")) {
				cardUser.setCardUserMemo(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_tips")) {
				cardUser.setCardUserTips(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_firm")) {
				cardUser.setCardUserFirm(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_physical_num")) {
				cardUser.setCardUserPhysicalNum(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_printed_num")) {
				cardUser.setCardUserPrintedNum(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_state_code")) {
				if (cardUser.getState() == null) {
					cardUser.setState(new State());
				}
				cardUser.getState().setStateCode(new Integer(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_state_name")) {
				if (cardUser.getState() == null) {
					cardUser.setState(new State());
				}
				cardUser.getState().setStateName(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_enroll_shop")) {
				cardUser.setCardUserEnrollShop(new Integer(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_init_time")) {
				cardUser.setCardUserInitTime(DateUtil.getXmlTDate(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_deposit_count")) {
				cardUser.setCardUserDepositCount(new Integer(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_consume_count")) {
				cardUser.setCardUserConsumeCount(new Integer(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_invoice_count")) {
				cardUser.setCardUserInvoiceCount(new Integer(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_balance_count")) {
				cardUser.setCardUserBalanceCount(new Integer(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_total_cash")) {
				cardUser.setCardUserTotalCash(new BigDecimal(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_total_invoice")) {
				cardUser.setCardUserTotalInvoice(new BigDecimal(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_ref_num")) {
				cardUser.setCardUserRefNum(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_ref_type")) {
				cardUser.setCardUserRefType(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_locked")) {
				cardUser.setCardUserLocked(new Boolean(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_operator")) {
				cardUser.setCardUserOperator(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_flag")) {
				cardUser.setCardUserFlag(new Boolean(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_last_edit_time")) {
				cardUser.setCardUserLastEditTime(DateUtil.getXmlTDate(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_uuid")) {
				cardUser.setCardUserUuid(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_revoker")) {
				cardUser.setCardUserRevoker(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_revoke_time")) {
				cardUser.setCardUserRevokeTime(DateUtil.getXmlTDate(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_revoke_shop")) {
				cardUser.setCardUserRevokeShop(new Integer(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_exception_flag")) {
				cardUser.setCardUserExceptionFlag(new Boolean(child.getText()));
			} else if (child.getName().equalsIgnoreCase("card_user_exception_memo")) {
				cardUser.setCardUserExceptionMemo(child.getText());
			} else if (child.getName().equalsIgnoreCase("card_user_open_id")) {
				cardUser.setCardUserOpenId(child.getText());
			}
		}

		return cardUser;
	}

	public static String toXml(List<CardUser> cardUserList) {
		Document document = DocumentHelper.createDocument();
		document.setXMLEncoding("GBK");
		Element root = document.addElement("CARD_USER_LIST");
		for (int i = 0; i < cardUserList.size(); i++) {
			CardUser cardUser = (CardUser) cardUserList.get(i);
			Element cardUserElement = root.addElement("card_user".toUpperCase());
			cardUser.toXml(cardUserElement);
		}
		return document.asXML();
	}
	
	public static String toXml(CardUser cardUser) {
		
		List<CardUser> cardUserList = new ArrayList<CardUser>();
		cardUserList.add(cardUser);
		Document document = DocumentHelper.createDocument();
		document.setXMLEncoding("GBK");
		Element root = document.addElement("CARD_USER_LIST");
		for (int i = 0; i < cardUserList.size(); i++) {
			cardUser = (CardUser) cardUserList.get(i);
			Element cardUserElement = root.addElement("card_user".toUpperCase());
			cardUser.toXml(cardUserElement);
		}
		return document.asXML();
	}

	@SuppressWarnings("unchecked")
	public static List<CardUser> fromXml(String xmlStream) {
		List<CardUser> cardUserList = new ArrayList<CardUser>();
		try {
			Document document = DocumentHelper.parseText(xmlStream);
			Element root = document.getRootElement();
			Iterator<Element> iterator = root.elementIterator();
			while(iterator.hasNext()) {
				Element cardUserElement = iterator.next();
				CardUser cardUser = fromXml(cardUserElement);
				cardUserList.add(cardUser);
			}
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return cardUserList;
	}

	public static CardUser objectFromXml(String xmlStream) {
		if (StringUtils.isEmpty(xmlStream)) {
			return null;
		}
		try {
			return fromXml(xmlStream).get(0);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
		return null;

	}

	public static String objectToXml(CardUser cardUser) {
		List<CardUser> cardUserList = new ArrayList<CardUser>();
		cardUserList.add(cardUser);
		return toXml(cardUserList);
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((cardUserNum == null) ? 0 : cardUserNum.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		CardUser other = (CardUser) obj;
		if (cardUserNum == null) {
			if (other.cardUserNum != null)
				return false;
		} else if (!cardUserNum.equals(other.cardUserNum))
			return false;
		return true;
	}
	
	public String getMemberCacheKey(){
		return "AMA-POS-CARDUSER-" + systemBookCode + "-" + cardUserNum;
	}
	
	public static String getMemberCacheKey(String systemBookCode, Integer cardUserNum){
		return "AMA-POS-CARDUSER-" + systemBookCode + "-" + cardUserNum;
	}
	
	public List<String> getLogs() {
		return logs;
	}


	public void setLogs(List<String> logs) {
		this.logs = logs;
	}


	public static CardUser getCardUser(List<CardUser> cardUsers, Integer cardUserNum) {
		for(CardUser cardUser : cardUsers) {
			if(cardUser.getCardUserNum().equals(cardUserNum)) {
				return cardUser;
			}
		}
		return null;
	}

}
