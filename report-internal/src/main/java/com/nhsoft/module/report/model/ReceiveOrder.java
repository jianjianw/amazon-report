package com.nhsoft.module.report.model;


import com.nhsoft.module.report.query.State;
import org.apache.commons.lang3.StringUtils;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import javax.persistence.*;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * ReceiveOrder generated by hbm2java
 */
@Entity
public class ReceiveOrder implements java.io.Serializable {

	private static final long serialVersionUID = 5597393326986812572L;
	@Id
	private String receiveOrderFid;
	private String purchaseOrderFid;
	private String systemBookCode;
	private Integer branchNum;
	@ManyToOne
	@JoinColumn(name="supplierNum")
	private Supplier supplier;
	private Integer storehouseNum;
	private Date receiveOrderDate;
	private String receiveOrderOperator;
	private Date receiveOrderPaymentDate;
	private String receiveOrderMemo;
	@Embedded
	@AttributeOverrides( {
		 			@AttributeOverride(name="stateCode", column = @Column(name="receiveOrderStateCode")), 
		@AttributeOverride(name="stateName", column = @Column(name="receiveOrderStateName")) } )
	private State state;
	private Boolean receiveOrderTransferFlag;
	private String receiveOrderCreator;
	private String receiveOrderAuditor;
	private BigDecimal receiveOrderTotalMoney;
	private BigDecimal receiveOrderDiscountMoney;
	private BigDecimal receiveOrderDueMoney;
	private BigDecimal receiveOrderPaidMoney;
	private Date receiveOrderLastestPaymentDate;
	private String receiveOrderUuid;
	private Integer settlementBranchNum;
	private BigDecimal receiveOrderPresentMoney;
	private Date receiveOrderCreateTime;
	private Date receiveOrderAuditTime;
	private Boolean receiveOrderReadFlag;
	private Integer receiveOrderPrintCount;
	private Boolean receiveOrderRepealFlag;
	private String receiveOrderBillNo;
	private String receiveOrderType;
	private BigDecimal receiveOrderOtherMoney;
	private String receiveOrderPurchaseState;
	private Boolean receiveOrderAntiFlag;
	private String receiveOrderAuditBizday;
	private String receiveOrderInvoiceNo;
	private BigDecimal receiveOrderTaxMoney;
	private BigDecimal receiveOrderSaleMoney;
	@OneToMany
	@Fetch(FetchMode.SUBSELECT)
	@JoinColumn(name = "receiveOrderFid", updatable=false, insertable=false)
	private List<ReceiveOrderDetail> receiveOrderDetails = new ArrayList<ReceiveOrderDetail>();
	
	//临时属性
	@Transient
	private AppUser appUser;
	@Transient
	private String copyFid;
	@Transient
	private Integer appUserNum;
	@Transient
	private Boolean saveAudit;
	@Transient
	private Boolean tempAudit = false;
	@Transient
	private String branchName;

	public String getBranchName() {
		return branchName;
	}

	public void setBranchName(String branchName) {
		this.branchName = branchName;
	}

	public BigDecimal getReceiveOrderSaleMoney() {
		return receiveOrderSaleMoney;
	}

	public void setReceiveOrderSaleMoney(BigDecimal receiveOrderSaleMoney) {
		this.receiveOrderSaleMoney = receiveOrderSaleMoney;
	}

	public Boolean getTempAudit() {
		return tempAudit;
	}

	public void setTempAudit(Boolean tempAudit) {
		this.tempAudit = tempAudit;
	}

	public String getReceiveOrderInvoiceNo() {
		return receiveOrderInvoiceNo;
	}

	public void setReceiveOrderInvoiceNo(String receiveOrderInvoiceNo) {
		this.receiveOrderInvoiceNo = receiveOrderInvoiceNo;
	}

	public String getReceiveOrderAuditBizday() {
		return receiveOrderAuditBizday;
	}

	public void setReceiveOrderAuditBizday(String receiveOrderAuditBizday) {
		this.receiveOrderAuditBizday = receiveOrderAuditBizday;
	}

	public Boolean getSaveAudit() {
		return saveAudit;
	}

	public void setSaveAudit(Boolean saveAudit) {
		this.saveAudit = saveAudit;
	}

	public Boolean getReceiveOrderAntiFlag() {
		return receiveOrderAntiFlag;
	}

	public void setReceiveOrderAntiFlag(Boolean receiveOrderAntiFlag) {
		this.receiveOrderAntiFlag = receiveOrderAntiFlag;
	}

	public String getReceiveOrderPurchaseState() {
		return receiveOrderPurchaseState;
	}

	public void setReceiveOrderPurchaseState(String receiveOrderPurchaseState) {
		this.receiveOrderPurchaseState = receiveOrderPurchaseState;
	}

	public BigDecimal getReceiveOrderOtherMoney() {
		return receiveOrderOtherMoney;
	}

	public void setReceiveOrderOtherMoney(BigDecimal receiveOrderOtherMoney) {
		this.receiveOrderOtherMoney = receiveOrderOtherMoney;
	}

	public String getReceiveOrderType() {
		return receiveOrderType;
	}

	public void setReceiveOrderType(String receiveOrderType) {
		this.receiveOrderType = receiveOrderType;
	}

	public String getCopyFid() {
		return copyFid;
	}

	public void setCopyFid(String copyFid) {
		this.copyFid = copyFid;
	}

	public Boolean getReceiveOrderRepealFlag() {
		return receiveOrderRepealFlag;
	}

	public void setReceiveOrderRepealFlag(Boolean receiveOrderRepealFlag) {
		this.receiveOrderRepealFlag = receiveOrderRepealFlag;
	}

	public String getReceiveOrderBillNo() {
		return receiveOrderBillNo;
	}

	public void setReceiveOrderBillNo(String receiveOrderBillNo) {
		this.receiveOrderBillNo = receiveOrderBillNo;
	}

	public AppUser getAppUser() {
		return appUser;
	}

	public void setAppUser(AppUser appUser) {
		this.appUser = appUser;
	}

	public Integer getReceiveOrderPrintCount() {
		return receiveOrderPrintCount;
	}

	public void setReceiveOrderPrintCount(Integer receiveOrderPrintCount) {
		this.receiveOrderPrintCount = receiveOrderPrintCount;
	}

	public String getReceiveOrderFid() {
		return this.receiveOrderFid;
	}

	public void setReceiveOrderFid(String receiveOrderFid) {
		this.receiveOrderFid = receiveOrderFid;
	}

	public String getPurchaseOrderFid() {
		return this.purchaseOrderFid;
	}

	public void setPurchaseOrderFid(String purchaseOrderFid) {
		this.purchaseOrderFid = purchaseOrderFid;
	}

	public String getSystemBookCode() {
		return this.systemBookCode;
	}

	public void setSystemBookCode(String systemBookCode) {
		this.systemBookCode = systemBookCode;
	}

	public Integer getBranchNum() {
		return this.branchNum;
	}

	public void setBranchNum(Integer branchNum) {
		this.branchNum = branchNum;
	}

	public Supplier getSupplier() {
		return supplier;
	}

	public void setSupplier(Supplier supplier) {
		this.supplier = supplier;
	}

	public Integer getStorehouseNum() {
		return this.storehouseNum;
	}

	public void setStorehouseNum(Integer storehouseNum) {
		this.storehouseNum = storehouseNum;
	}

	public Date getReceiveOrderDate() {
		return this.receiveOrderDate;
	}

	public void setReceiveOrderDate(Date receiveOrderDate) {
		this.receiveOrderDate = receiveOrderDate;
	}

	public String getReceiveOrderOperator() {
		return this.receiveOrderOperator;
	}

	public void setReceiveOrderOperator(String receiveOrderOperator) {
		this.receiveOrderOperator = receiveOrderOperator;
	}

	public Date getReceiveOrderPaymentDate() {
		return this.receiveOrderPaymentDate;
	}

	public void setReceiveOrderPaymentDate(Date receiveOrderPaymentDate) {
		this.receiveOrderPaymentDate = receiveOrderPaymentDate;
	}

	public String getReceiveOrderMemo() {
		return this.receiveOrderMemo;
	}

	public void setReceiveOrderMemo(String receiveOrderMemo) {
		this.receiveOrderMemo = receiveOrderMemo;
	}

	public State getState() {
		return state;
	}

	public void setState(State state) {
		this.state = state;
	}

	public String getReceiveOrderCreator() {
		return this.receiveOrderCreator;
	}

	public void setReceiveOrderCreator(String receiveOrderCreator) {
		this.receiveOrderCreator = receiveOrderCreator;
	}

	public String getReceiveOrderAuditor() {
		return this.receiveOrderAuditor;
	}

	public void setReceiveOrderAuditor(String receiveOrderAuditor) {
		this.receiveOrderAuditor = receiveOrderAuditor;
	}

	public BigDecimal getReceiveOrderTotalMoney() {
		return this.receiveOrderTotalMoney;
	}

	public void setReceiveOrderTotalMoney(BigDecimal receiveOrderTotalMoney) {
		this.receiveOrderTotalMoney = receiveOrderTotalMoney;
	}

	public BigDecimal getReceiveOrderDiscountMoney() {
		return this.receiveOrderDiscountMoney;
	}

	public void setReceiveOrderDiscountMoney(
			BigDecimal receiveOrderDiscountMoney) {
		if(receiveOrderDiscountMoney != null){
			receiveOrderDiscountMoney = receiveOrderDiscountMoney.setScale(2, BigDecimal.ROUND_HALF_UP);
		}
		this.receiveOrderDiscountMoney = receiveOrderDiscountMoney;
	}

	public BigDecimal getReceiveOrderDueMoney() {
		return this.receiveOrderDueMoney;
	}

	public void setReceiveOrderDueMoney(BigDecimal receiveOrderDueMoney) {
		if(receiveOrderDueMoney != null){
			receiveOrderDueMoney = receiveOrderDueMoney.setScale(2, BigDecimal.ROUND_HALF_UP);
		}
		this.receiveOrderDueMoney = receiveOrderDueMoney;
	}

	public BigDecimal getReceiveOrderPaidMoney() {
		return this.receiveOrderPaidMoney;
	}

	public void setReceiveOrderPaidMoney(BigDecimal receiveOrderPaidMoney) {
		if(receiveOrderPaidMoney != null){
			receiveOrderPaidMoney = receiveOrderPaidMoney.setScale(2, BigDecimal.ROUND_HALF_UP);
		}
		this.receiveOrderPaidMoney = receiveOrderPaidMoney;
	}

	public Date getReceiveOrderLastestPaymentDate() {
		return this.receiveOrderLastestPaymentDate;
	}

	public void setReceiveOrderLastestPaymentDate(
			Date receiveOrderLastestPaymentDate) {
		this.receiveOrderLastestPaymentDate = receiveOrderLastestPaymentDate;
	}

	public String getReceiveOrderUuid() {
		return this.receiveOrderUuid;
	}

	public void setReceiveOrderUuid(String receiveOrderUuid) {
		this.receiveOrderUuid = receiveOrderUuid;
	}

	public Integer getSettlementBranchNum() {
		return this.settlementBranchNum;
	}

	public void setSettlementBranchNum(Integer settlementBranchNum) {
		this.settlementBranchNum = settlementBranchNum;
	}

	public BigDecimal getReceiveOrderPresentMoney() {
		return this.receiveOrderPresentMoney;
	}

	public void setReceiveOrderPresentMoney(BigDecimal receiveOrderPresentMoney) {
		this.receiveOrderPresentMoney = receiveOrderPresentMoney;
	}

	public Date getReceiveOrderCreateTime() {
		return this.receiveOrderCreateTime;
	}

	public void setReceiveOrderCreateTime(Date receiveOrderCreateTime) {
		this.receiveOrderCreateTime = receiveOrderCreateTime;
	}

	public Date getReceiveOrderAuditTime() {
		return this.receiveOrderAuditTime;
	}

	public void setReceiveOrderAuditTime(Date receiveOrderAuditTime) {
		this.receiveOrderAuditTime = receiveOrderAuditTime;

	}

	public Boolean getReceiveOrderTransferFlag() {
		return receiveOrderTransferFlag;
	}

	public void setReceiveOrderTransferFlag(Boolean receiveOrderTransferFlag) {
		this.receiveOrderTransferFlag = receiveOrderTransferFlag;
	}

	public List<ReceiveOrderDetail> getReceiveOrderDetails() {
		return receiveOrderDetails;
	}

	public void setReceiveOrderDetails(
			List<ReceiveOrderDetail> receiveOrderDetails) {
		this.receiveOrderDetails = receiveOrderDetails;
	}

	public Boolean getReceiveOrderReadFlag() {
		return receiveOrderReadFlag;
	}

	public void setReceiveOrderReadFlag(Boolean receiveOrderReadFlag) {
		this.receiveOrderReadFlag = receiveOrderReadFlag;
	}

	public Integer getAppUserNum() {
		return appUserNum;
	}

	public void setAppUserNum(Integer appUserNum) {
		this.appUserNum = appUserNum;
	}

	public BigDecimal getReceiveOrderTaxMoney() {
		return receiveOrderTaxMoney;
	}

	public void setReceiveOrderTaxMoney(BigDecimal receiveOrderTaxMoney) {
		this.receiveOrderTaxMoney = receiveOrderTaxMoney;
	}

	public void removeZeroDetail() {
		for (int i = receiveOrderDetails.size() - 1; i >= 0; i--) {
			ReceiveOrderDetail detail = receiveOrderDetails.get(i);
			if (detail.getReceiveOrderDetailQty().compareTo(BigDecimal.ZERO) == 0
					&& detail.getReceiveOrderDetailPresentCount().compareTo(
							BigDecimal.ZERO) == 0) {
				receiveOrderDetails.remove(i);
			}
		}
	}
	
	public void recal() {
		receiveOrderTotalMoney = BigDecimal.ZERO;
		receiveOrderOtherMoney = BigDecimal.ZERO;
		receiveOrderSaleMoney = BigDecimal.ZERO;
		for (int i = receiveOrderDetails.size() - 1; i >= 0; i--) {
			ReceiveOrderDetail detail = receiveOrderDetails.get(i);
			
			if(detail.getReceiveOrderDetailUseQty().compareTo(BigDecimal.ZERO) != 0){
				
				detail.setReceiveOrderDetailQty(detail.getReceiveOrderDetailUseQty().multiply(detail.getReceiveOrderDetailUseRate()).setScale(4, BigDecimal.ROUND_HALF_UP));
			}
			
			if(detail.getReceiveOrderDetailPrice() != null){
				
				detail.setReceiveOrderDetailSaleSubtotal(detail.getReceiveOrderDetailQty().multiply(detail.getReceiveOrderDetailPrice()));
			}
			
			
			if(detail.getReceiveOrderDetailQty().compareTo(BigDecimal.ZERO) > 0){
				detail.setReceiveOrderDetailCost(detail.getReceiveOrderDetailSubtotal().divide(detail.getReceiveOrderDetailQty(), 8, BigDecimal.ROUND_HALF_UP));
				detail.setReceiveOrderDetailUsePrice(detail.getReceiveOrderDetailCost().multiply(detail.getReceiveOrderDetailUseRate()).setScale(4, BigDecimal.ROUND_HALF_UP));

			}
			if(detail.getReceiveOrderDetailPresentUseQty() == null){
				detail.setReceiveOrderDetailPresentUseQty(BigDecimal.ZERO);
			}
			if(detail.getReceiveOrderDetailPresentCount() == null){
				detail.setReceiveOrderDetailPresentCount(BigDecimal.ZERO);
			}
			receiveOrderTotalMoney = receiveOrderTotalMoney.add(detail.getReceiveOrderDetailSubtotal());
			
			if(detail.getReceiveOrderDetailOtherMoney() == null){
				detail.setReceiveOrderDetailOtherMoney(BigDecimal.ZERO);
			}
			receiveOrderOtherMoney = receiveOrderOtherMoney.add(detail.getReceiveOrderDetailOtherMoney());
			
			if(detail.getReceiveOrderDetailPrice() != null){
				receiveOrderSaleMoney = receiveOrderSaleMoney.add(detail.getReceiveOrderDetailPrice().multiply(detail.getReceiveOrderDetailQty()));
			}
		}
		
		receiveOrderSaleMoney = receiveOrderSaleMoney.setScale(2, BigDecimal.ROUND_HALF_UP);		
		receiveOrderTotalMoney = receiveOrderTotalMoney.setScale(2, BigDecimal.ROUND_HALF_UP);
		receiveOrderDueMoney = receiveOrderTotalMoney;
	}

	public ReceiveOrderDetail getReceiveOrderDetail(Integer itemNum, String lotNumber) {
		for(int i = 0;i < receiveOrderDetails.size();i++){
			ReceiveOrderDetail receiveOrderDetail = receiveOrderDetails.get(i);
			if(receiveOrderDetail.getItemNum().equals(itemNum)){
				if(StringUtils.isEmpty(lotNumber)){
					return receiveOrderDetail;
				} else {
					if(StringUtils.equals(lotNumber, receiveOrderDetail.getReceiveOrderDetailLotNumber())){
						return receiveOrderDetail;
					}
				}
			}
		}
		return null;
	}
	
	public static ReceiveOrder get(List<ReceiveOrder> receiveOrders, String receiveOrderFid) {
		for(int i = 0;i < receiveOrders.size();i++){
			ReceiveOrder receiveOrder = receiveOrders.get(i);
			if(receiveOrder.getReceiveOrderFid().equals(receiveOrderFid)){
				return receiveOrder;
			}
		}
		return null;
	}
	
	public static ReceiveOrder get(List<ReceiveOrder> receiveOrders, Integer branchNum, Integer supplierNum) {
		for(int i = 0;i < receiveOrders.size();i++){
			ReceiveOrder receiveOrder = receiveOrders.get(i);
			if(receiveOrder.getBranchNum().equals(branchNum) && receiveOrder.getSupplier().getSupplierNum().equals(supplierNum)){
				return receiveOrder;
			}
		}
		return null;
	}
	
	public static ReceiveOrder getBySettlementBranchNum(List<ReceiveOrder> receiveOrders, Integer settlementBranchNum, Integer supplierNum) {
		for(int i = 0;i < receiveOrders.size();i++){
			ReceiveOrder receiveOrder = receiveOrders.get(i);
			if(receiveOrder.getSettlementBranchNum().equals(settlementBranchNum) && receiveOrder.getSupplier().getSupplierNum().equals(supplierNum)){
				return receiveOrder;
			}
		}
		return null;
	}
	
}
