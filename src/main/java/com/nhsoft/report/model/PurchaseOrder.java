package com.nhsoft.report.model;



import com.nhsoft.report.shared.State;
import com.nhsoft.report.util.AppConstants;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * PurchaseOrder generated by hbm2java
 */
public class PurchaseOrder implements java.io.Serializable {

	private static final long serialVersionUID = -7614060991735956420L;
	private String purchaseOrderFid;
	private String systemBookCode;
	private Integer branchNum;
	private Supplier supplier;
	private Integer storehouseNum;
	private Date purchaseOrderCreateTime;
	private Date purchaseOrderDeadline;
	private String purchaseOrderOperator;
	private State state;
	private String purchaseOrderMemo;
	private Boolean purchaseOrderTransferFlag;
	private String purchaseOrderCreator;
	private String purchaseOrderAuditor;
	private String purchaseOrderUuid;
	private BigDecimal purchaseOrderTotalMoney;
	private Date purchaseOrderDate;
	private Date purchaseOrderAuditTime;
	private Integer purchaseOrderManageStatus;
	private String purchaseOrderCancelOperator;
	private Date purchaseOrderCancelTime;
	private Boolean purchaseOrderRepealFlag;
	private String purchaseOrderBillNo;
	private String purchaseOrderReceiveState;
	private Boolean purchaseOrderAntiFlag;
	private String purchaseOrderAuditBizday;
	private BigDecimal purchaseOrderPreMoney; //预付金额
	private Date purchaseOrderReceiveDate;
	private List<PurchaseOrderDetail> purchaseOrderDetails = new ArrayList<PurchaseOrderDetail>(0);
	private List<RequestOrder> requestOrders = new ArrayList<RequestOrder>();
	
	//临时属性
	private Integer requestBranchNum;
	private Date receiveDate;
	private Boolean saveAndAudit = false;

	private AppUser appUser;
	private String copyFid;
	
	public Boolean getSaveAndAudit() {
		return saveAndAudit;
	}

	public void setSaveAndAudit(Boolean saveAndAudit) {
		this.saveAndAudit = saveAndAudit;
	}

	public Date getPurchaseOrderReceiveDate() {
		return purchaseOrderReceiveDate;
	}

	public void setPurchaseOrderReceiveDate(Date purchaseOrderReceiveDate) {
		this.purchaseOrderReceiveDate = purchaseOrderReceiveDate;
	}

	public Date getReceiveDate() {
		return receiveDate;
	}

	public void setReceiveDate(Date receiveDate) {
		this.receiveDate = receiveDate;
	}

	public String getCopyFid() {
		return copyFid;
	}

	public void setCopyFid(String copyFid) {
		this.copyFid = copyFid;
	}
	
    public AppUser getAppUser() {
		return appUser;
	}

	public void setAppUser(AppUser appUser) {
		this.appUser = appUser;
	}
	public BigDecimal getPurchaseOrderPreMoney() {
		return purchaseOrderPreMoney;
	}

	public void setPurchaseOrderPreMoney(BigDecimal purchaseOrderPreMoney) {
		this.purchaseOrderPreMoney = purchaseOrderPreMoney;
	}

	public String getPurchaseOrderAuditBizday() {
		return purchaseOrderAuditBizday;
	}

	public void setPurchaseOrderAuditBizday(String purchaseOrderAuditBizday) {
		this.purchaseOrderAuditBizday = purchaseOrderAuditBizday;
	}

	public Integer getRequestBranchNum() {
		return requestBranchNum;
	}

	public void setRequestBranchNum(Integer requestBranchNum) {
		this.requestBranchNum = requestBranchNum;
	}

	public Boolean getPurchaseOrderAntiFlag() {
		return purchaseOrderAntiFlag;
	}

	public void setPurchaseOrderAntiFlag(Boolean purchaseOrderAntiFlag) {
		this.purchaseOrderAntiFlag = purchaseOrderAntiFlag;
	}

	public String getPurchaseOrderReceiveState() {
		return purchaseOrderReceiveState;
	}

	public void setPurchaseOrderReceiveState(String purchaseOrderReceiveState) {
		this.purchaseOrderReceiveState = purchaseOrderReceiveState;
	}

	public String getPurchaseOrderFid() {
		return purchaseOrderFid;
	}

	public void setPurchaseOrderFid(String purchaseOrderFid) {
		this.purchaseOrderFid = purchaseOrderFid;
	}

	public String getSystemBookCode() {
		return systemBookCode;
	}

	public void setSystemBookCode(String systemBookCode) {
		this.systemBookCode = systemBookCode;
	}

	public Integer getBranchNum() {
		return branchNum;
	}

	public void setBranchNum(Integer branchNum) {
		this.branchNum = branchNum;
	}

	public Supplier getSupplier() {
		return supplier;
	}

	public void setSupplier(Supplier supplier) {
		this.supplier = supplier;
	}

	public Integer getStorehouseNum() {
		return storehouseNum;
	}

	public void setStorehouseNum(Integer storehouseNum) {
		this.storehouseNum = storehouseNum;
	}

	public Date getPurchaseOrderCreateTime() {
		return purchaseOrderCreateTime;
	}

	public void setPurchaseOrderCreateTime(Date purchaseOrderCreateTime) {
		this.purchaseOrderCreateTime = purchaseOrderCreateTime;
	}

	public Date getPurchaseOrderDeadline() {
		return purchaseOrderDeadline;
	}

	public void setPurchaseOrderDeadline(Date purchaseOrderDeadline) {
		this.purchaseOrderDeadline = purchaseOrderDeadline;
	}

	public String getPurchaseOrderOperator() {
		return purchaseOrderOperator;
	}

	public void setPurchaseOrderOperator(String purchaseOrderOperator) {
		this.purchaseOrderOperator = purchaseOrderOperator;
	}

	public State getState() {
		return state;
	}

	public void setState(State state) {
		this.state = state;
	}

	public String getPurchaseOrderMemo() {
		return purchaseOrderMemo;
	}

	public void setPurchaseOrderMemo(String purchaseOrderMemo) {
		this.purchaseOrderMemo = purchaseOrderMemo;
	}

	public Boolean getPurchaseOrderTransferFlag() {
		return purchaseOrderTransferFlag;
	}

	public void setPurchaseOrderTransferFlag(Boolean purchaseOrderTransferFlag) {
		this.purchaseOrderTransferFlag = purchaseOrderTransferFlag;
	}

	public String getPurchaseOrderCreator() {
		return purchaseOrderCreator;
	}

	public void setPurchaseOrderCreator(String purchaseOrderCreator) {
		this.purchaseOrderCreator = purchaseOrderCreator;
	}

	public String getPurchaseOrderAuditor() {
		return purchaseOrderAuditor;
	}

	public void setPurchaseOrderAuditor(String purchaseOrderAuditor) {
		this.purchaseOrderAuditor = purchaseOrderAuditor;
	}

	public String getPurchaseOrderUuid() {
		return purchaseOrderUuid;
	}

	public void setPurchaseOrderUuid(String purchaseOrderUuid) {
		this.purchaseOrderUuid = purchaseOrderUuid;
	}

	public BigDecimal getPurchaseOrderTotalMoney() {
		return purchaseOrderTotalMoney;
	}

	public void setPurchaseOrderTotalMoney(BigDecimal purchaseOrderTotalMoney) {
		this.purchaseOrderTotalMoney = purchaseOrderTotalMoney;
	}

	public Date getPurchaseOrderDate() {
		return purchaseOrderDate;
	}

	public void setPurchaseOrderDate(Date purchaseOrderDate) {
		this.purchaseOrderDate = purchaseOrderDate;
	}

	public Date getPurchaseOrderAuditTime() {
		return purchaseOrderAuditTime;
	}

	public void setPurchaseOrderAuditTime(Date purchaseOrderAuditTime) {
		this.purchaseOrderAuditTime = purchaseOrderAuditTime;

	}

	public Integer getPurchaseOrderManageStatus() {
		return purchaseOrderManageStatus;
	}

	public void setPurchaseOrderManageStatus(Integer purchaseOrderManageStatus) {
		this.purchaseOrderManageStatus = purchaseOrderManageStatus;
	}

	public List<PurchaseOrderDetail> getPurchaseOrderDetails() {
		return purchaseOrderDetails;
	}

	public void setPurchaseOrderDetails(
			List<PurchaseOrderDetail> purchaseOrderDetails) {
		this.purchaseOrderDetails = purchaseOrderDetails;
	}

	public List<RequestOrder> getRequestOrders() {
		return requestOrders;
	}

	public void setRequestOrders(List<RequestOrder> requestOrders) {
		this.requestOrders = requestOrders;
	}

	public String getPurchaseOrderCancelOperator() {
		return purchaseOrderCancelOperator;
	}

	public void setPurchaseOrderCancelOperator(String purchaseOrderCancelOperator) {
		this.purchaseOrderCancelOperator = purchaseOrderCancelOperator;
	}

	public Date getPurchaseOrderCancelTime() {
		return purchaseOrderCancelTime;
	}

	public void setPurchaseOrderCancelTime(Date purchaseOrderCancelTime) {
		this.purchaseOrderCancelTime = purchaseOrderCancelTime;
	}

	public Boolean getPurchaseOrderRepealFlag() {
		return purchaseOrderRepealFlag;
	}

	public void setPurchaseOrderRepealFlag(Boolean purchaseOrderRepealFlag) {
		this.purchaseOrderRepealFlag = purchaseOrderRepealFlag;
	}

	public String getPurchaseOrderBillNo() {
		return purchaseOrderBillNo;
	}

	public void setPurchaseOrderBillNo(String purchaseOrderBillNo) {
		this.purchaseOrderBillNo = purchaseOrderBillNo;
	}

	public void calcOrderMoney(){
		purchaseOrderTotalMoney = BigDecimal.ZERO;
		for(int i = 0;i < purchaseOrderDetails.size();i++){
			PurchaseOrderDetail detail = purchaseOrderDetails.get(i);
			purchaseOrderTotalMoney = purchaseOrderTotalMoney.add(detail.getPurchaseOrderDetailMoney());
		}
	}
	
	public void recal() {
		purchaseOrderTotalMoney = BigDecimal.ZERO;
		for (int i = purchaseOrderDetails.size() - 1; i >= 0; i--) {
			PurchaseOrderDetail detail = purchaseOrderDetails.get(i);
			detail.setPurchaseOrderDetailMoney(detail.getPurchaseOrderDetailUseQty().multiply(detail.getPurchaseOrderDetailUsePrice()).setScale(2, BigDecimal.ROUND_HALF_UP));
			detail.setPurchaseOrderDetailQty(detail.getPurchaseOrderDetailUseQty().multiply(detail.getPurchaseOrderDetailUseRate()));
			if(detail.getPurchaseOrderDetailQty().compareTo(BigDecimal.ZERO) > 0){
				detail.setPurchaseOrderDetailCost(detail.getPurchaseOrderDetailMoney().divide(detail.getPurchaseOrderDetailQty(), 8, BigDecimal.ROUND_HALF_UP));
			}
			purchaseOrderTotalMoney = purchaseOrderTotalMoney.add(detail.getPurchaseOrderDetailMoney());
		}
		purchaseOrderTotalMoney = purchaseOrderTotalMoney.setScale(2, BigDecimal.ROUND_HALF_UP);
	}
	
	public void removeZeroDetail(){
		for(int i = purchaseOrderDetails.size() - 1;i >= 0;i--){
			PurchaseOrderDetail detail = purchaseOrderDetails.get(i);
			if(detail.getPurchaseOrderDetailPresentQty() == null){
				detail.setPurchaseOrderDetailPresentQty(BigDecimal.ZERO);
			}
			if(detail.getPurchaseOrderDetailUseQty().compareTo(BigDecimal.ZERO) == 0 
					&& detail.getPurchaseOrderDetailPresentQty().compareTo(BigDecimal.ZERO) == 0){
				purchaseOrderDetails.remove(i);
			}
		}
	}
	
	public String getReceiveState(){
		String state = AppConstants.PURCHASE_ORDER_RECEIVE_STATE_FINISH;
		for(int i = 0;i < purchaseOrderDetails.size();i++){
			PurchaseOrderDetail detail = purchaseOrderDetails.get(i);
			if(detail.getPurchaseOrderDetailRecievedAmount() == null){
				detail.setPurchaseOrderDetailRecievedAmount(BigDecimal.ZERO);
			}
			if(detail.getPurchaseOrderDetailRecievedAmount().subtract(detail.getPurchaseOrderDetailQty()).abs().compareTo(BigDecimal.valueOf(0.01)) > 0){
				state = AppConstants.PURCHASE_ORDER_RECEIVE_STATE_PART;
				break;
			}
		}
		return state;
	}

	public PurchaseOrderDetail getDetail(Integer itemNum) {
		for(int i = 0;i < purchaseOrderDetails.size();i++){
			PurchaseOrderDetail detail = purchaseOrderDetails.get(i);
			if(detail.getItemNum().equals(itemNum)){
				return detail;
			}
		}
		return null;
	}
	
	public static PurchaseOrder get(List<PurchaseOrder> purchaseOrders, Integer requestBranchNum, Integer supplierNum) {
		for(int i = 0;i < purchaseOrders.size();i++){
			PurchaseOrder purchaseOrder = purchaseOrders.get(i);
			if(purchaseOrder.getRequestBranchNum().equals(requestBranchNum) && purchaseOrder.getSupplier().getSupplierNum().equals(supplierNum)){
				return purchaseOrder;
			}
		}
		return null;
	}
}
